// Generated by CoffeeScript 1.4.0
var ALIVE, BIRTH, GameOfLife,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

BIRTH = [3];

ALIVE = [2, 3];

GameOfLife = (function() {

  function GameOfLife(sizeX, sizeY) {
    var i, _i, _ref;
    this.sizeX = sizeX;
    this.sizeY = sizeY;
    this.generation = 0;
    this.currGen = [];
    this.nextGen = [];
    for (i = _i = 0, _ref = this.sizeX * this.sizeY; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.currGen[i] = this.cell(false, true);
      this.nextGen[i] = this.cell(false, false);
    }
  }

  GameOfLife.prototype.tick = function() {
    var c, cell, i, idx, n, neighbourIdxs, neighbours, nextGenCell, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
    _ref = this.nextGen;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      c.dirty = false;
    }
    _ref1 = this.currGen;
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      cell = _ref1[i];
      nextGenCell = this.nextGen[i];
      if (cell.dirty) {
        neighbourIdxs = this.neighbours(i);
        neighbours = (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = neighbourIdxs.length; _k < _len2; _k++) {
            idx = neighbourIdxs[_k];
            _results.push(this.currGen[idx]);
          }
          return _results;
        }).call(this);
        n = ((function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = neighbours.length; _k < _len2; _k++) {
            c = neighbours[_k];
            if (c.alive) {
              _results.push(c);
            }
          }
          return _results;
        })()).length;
        if (cell.alive) {
          if (__indexOf.call(ALIVE, n) >= 0) {
            nextGenCell.alive = true;
          } else {
            nextGenCell.alive = false;
            nextGenCell.dirty = true;
            for (_k = 0, _len2 = neighbourIdxs.length; _k < _len2; _k++) {
              idx = neighbourIdxs[_k];
              this.nextGen[idx].dirty = true;
            }
          }
        } else {
          if (__indexOf.call(BIRTH, n) >= 0) {
            nextGenCell.alive = true;
            nextGenCell.dirty = true;
            for (_l = 0, _len3 = neighbourIdxs.length; _l < _len3; _l++) {
              idx = neighbourIdxs[_l];
              this.nextGen[idx].dirty = true;
            }
          } else {
            nextGenCell.alive = false;
          }
        }
      } else {
        nextGenCell.alive = cell.alive;
      }
    }
    _ref2 = [this.nextGen, this.currGen], this.currGen = _ref2[0], this.nextGen = _ref2[1];
    this.generation++;
  };

  GameOfLife.prototype.set = function(i, alive) {
    var idx, target, _i, _len, _ref;
    target = this.currGen[i];
    if (target.alive === !alive) {
      target.dirty = true;
      _ref = this.neighbours(i);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        idx = _ref[_i];
        this.currGen[idx].dirty = true;
      }
    }
    target.alive = alive;
  };

  GameOfLife.prototype.cell = function(alive, dirty) {
    if (alive == null) {
      alive = false;
    }
    if (dirty == null) {
      dirty = false;
    }
    return {
      alive: alive,
      dirty: dirty
    };
  };

  GameOfLife.prototype.neighbours = function(i) {
    var endX, endY, ids, ni, nx, ny, startX, startY, x, y, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4;
    _ref = this.convert(i), x = _ref[0], y = _ref[1];
    switch (x) {
      case 0:
        startX = 0;
        endX = 1;
        break;
      case this.sizeX - 1:
        startX = -1;
        endX = 0;
        break;
      default:
        startX = -1;
        endX = 1;
    }
    switch (y) {
      case 0:
        startY = 0;
        endY = 1;
        break;
      case this.sizeY - 1:
        startY = -1;
        endY = 0;
        break;
      default:
        startY = -1;
        endY = 1;
    }
    ids = [];
    for (nx = _i = _ref1 = x + startX, _ref2 = x + endX; _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; nx = _ref1 <= _ref2 ? ++_i : --_i) {
      for (ny = _j = _ref3 = y + startY, _ref4 = y + endY; _ref3 <= _ref4 ? _j <= _ref4 : _j >= _ref4; ny = _ref3 <= _ref4 ? ++_j : --_j) {
        ni = nx + ny * this.sizeX;
        if (ni !== i) {
          ids.push(nx + ny * this.sizeX);
        }
      }
    }
    return ids;
  };

  GameOfLife.prototype.convert = function(i) {
    return [i % this.sizeY, i / this.sizeY << 0];
  };

  GameOfLife.prototype.print = function(binary) {
    var c, i, line, _i, _len, _ref;
    if (binary) {
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.currGen;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.alive ? 1 : 0);
        }
        return _results;
      }).call(this)).join('');
    }
    line = 'Generation ' + this.generation + '\n';
    _ref = this.currGen;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      c = _ref[i];
      if (c.alive) {
        line += '#';
      } else {
        line += '.';
      }
      if (i % this.sizeX === this.sizeX - 1 && i !== this.sizeX * this.sizeY - 1) {
        line += '\n';
      }
    }
    return line;
  };

  return GameOfLife;

})();

if (typeof window === 'undefined') {
  module.exports = GameOfLife;
}
