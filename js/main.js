// Generated by CoffeeScript 1.4.0
var Controller, UI;

UI = (function() {

  function UI(canvas, cellsX, cellsY, colors) {
    this.canvas = canvas;
    this.cellsX = cellsX;
    this.cellsY = cellsY;
    this.colors = colors;
    this.ctx = this.canvas.getContext('2d');
    this.w = this.canvas.width;
    this.h = this.canvas.height;
    this.cellW = this.w / this.cellsX << 0;
    this.cellH = this.h / this.cellsY << 0;
    this.cellS = 0;
    this.ctx.strokeStyle = 'white';
    this.ctx.fillStyle = 'black';
    if (this.cellS > 0) {
      this.drawGrid();
    }
  }

  UI.prototype.drawGrid = function() {
    var i, _i, _j, _ref, _ref1;
    this.ctx.lineWidth = this.cellS;
    for (i = _i = 1, _ref = this.cellsX; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      this.ctx.moveTo(i * this.cellW, 0);
      this.ctx.lineTo(i * this.cellW, this.h);
    }
    for (i = _j = 1, _ref1 = this.cellsY; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
      this.ctx.moveTo(0, i * this.cellH);
      this.ctx.lineTo(this.w, i * this.cellH);
    }
    return this.ctx.stroke();
  };

  UI.prototype.drawCell = function(x, y, alive) {
    var h, w, _ref, _ref1;
    _ref = this.getStartXY(x, y), x = _ref[0], y = _ref[1];
    _ref1 = this.getDrawWH(x, y), w = _ref1[0], h = _ref1[1];
    if (alive) {
      this.ctx.fillRect(x, y, w, h);
    } else {
      this.ctx.clearRect(x, y, w, h);
    }
  };

  UI.prototype.getStartXY = function(x, y) {
    return [x === 0 ? 0 : this.cellS / 2 + x * this.cellW, y === 0 ? 0 : this.cellS / 2 + y * this.cellH];
  };

  UI.prototype.getDrawWH = function(x, y) {
    return [this.cellW - (x === 0 ? this.cellS / 2 : this.cellS), this.cellH - (y === 0 ? this.cellS / 2 : this.cellS)];
  };

  return UI;

})();

Controller = (function() {

  function Controller(ui, gol, header, speed, gps) {
    var _this = this;
    this.ui = ui;
    this.gol = gol;
    this.header = header;
    this.speed = speed;
    this.gps = gps;
    this.paused = true;
    this.speed.attr('value', this.gps);
    this.speed.change(function() {
      var val;
      try {
        val = parseInt(_this.speed.attr('value'));
      } catch (e) {
        val = _this.speed;
      }
      _this.gps = val;
      console.log('change', _this.speed);
      if (!_this.paused) {
        clearInterval(_this.id);
        _this.paused = true;
        _this.toggle();
      }
    });
    this.c = $(this.ui.canvas);
    this.c.click(function(e) {
      var i, o, x, y;
      o = _this.c.offset();
      x = Math.floor((e.pageX - o.left) / _this.ui.cellW);
      y = Math.floor((e.pageY - o.top) / _this.ui.cellH);
      i = x + y * _this.gol.sizeX;
      _this.gol.set(i, !_this.gol.currGen[i].alive);
      _this.draw();
    });
    this.draw();
  }

  Controller.prototype.toggle = function() {
    var _this = this;
    this.paused = !this.paused;
    if (!this.paused) {
      this.draw();
      return this.id = setInterval(function() {
        if (_this.paused) {
          clearTimeout(_this.id);
          return;
        }
        _this.gol.tick();
        return _this.draw();
      }, 1000 / this.gps);
    }
  };

  Controller.prototype.draw = function() {
    var c, i, x, y, _i, _len, _ref, _ref1, _results;
    this.header.html('Generation ' + this.gol.generation);
    _ref = this.gol.currGen;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      c = _ref[i];
      if (!c.dirty) {
        continue;
      }
      _ref1 = this.gol.convert(i), x = _ref1[0], y = _ref1[1];
      _results.push(this.ui.drawCell(x, y, c.alive));
    }
    return _results;
  };

  return Controller;

})();

$(document).ready(function() {
  var controller, el, gol, h, i, ui, w, _i, _ref;
  el = $('#canvas')[0];
  el.width = 500;
  el.height = 500;
  w = 100;
  h = 100;
  ui = new UI(el, w, h);
  gol = new GameOfLife(w, h);
  for (i = _i = 0, _ref = w * h; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (Math.random() > 0.7) {
      gol.currGen[i].alive = true;
    }
  }
  controller = new Controller(ui, gol, $('#header'), $('#speed'), 50);
  $('#toggle').click(function() {
    return controller.toggle();
  });
});
